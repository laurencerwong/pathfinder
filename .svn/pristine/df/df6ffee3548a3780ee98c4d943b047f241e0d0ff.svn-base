//
//  Quadtree.m
//  cocos2d-normal
//
//  Created by Laurence Wong on 11/6/13.
//  Copyright (c) 2013 Instructor. All rights reserved.
//

#import "Quadtree.h"

@implementation Quadtree

+(id)quadtreeAtLevel:(int)inLevel withBounds:(CGRect)inRect
{
    return [[self alloc] initWithLevel:inLevel withBounds:inRect];
}

- (id)initWithLevel:(int)inLevel withBounds:(CGRect)inRect
{
    self = [super init];
    if (self) {
        maxObjects = 5;
        level = inLevel;
        bounds = inRect;
        nodes = [[NSMutableArray alloc] initWithCapacity:4]; //QUADtree, not anyothernumbertree
        objects = [[NSMutableArray alloc] init];
    }
    return self;
}

-(void)clear
{
    [objects removeAllObjects];
    for(Quadtree *qt in nodes)
    {
        [qt clear];
        qt = NULL;
    }
}
-(void)split
{
    int subWidth = bounds.size.width/2;
    int subHeight = bounds.size.height/2;
    int x = bounds.origin.x;
    int y = bounds.origin.y;
    
    CGRect newRect;

    newRect.size = CGSizeMake(subWidth, subHeight);
    newRect.origin = ccp(x + subWidth, y);
    [nodes addObject: [Quadtree quadtreeAtLevel:level + 1 withBounds:newRect]];
    newRect.origin = ccp(x, y);
    [nodes addObject: [Quadtree quadtreeAtLevel:level + 1 withBounds:newRect]];
    newRect.origin = ccp(x, y + subHeight);
    [nodes addObject: [Quadtree quadtreeAtLevel:level + 1 withBounds:newRect]];
    newRect.origin = ccp(x + subWidth, y + subHeight);
    [nodes addObject: [Quadtree quadtreeAtLevel:level + 1 withBounds:newRect]];
}

-(int)getIndex:(CGRect)inRect
{
    int index = -1;
    float verticalMidpoint = bounds.origin.x + bounds.size.width/2;
    float horizontalMidpoint = bounds.origin.y + bounds.size.height/2;
    
    BOOL topQuadrant = (inRect.origin.y < horizontalMidpoint && inRect.origin.y + inRect.size.height < horizontalMidpoint);
    BOOL bottomQuadrant = (inRect.origin.y > horizontalMidpoint);
    
    if (inRect.origin.x < verticalMidpoint && inRect.origin.x + inRect.size.width < verticalMidpoint) {
        if (topQuadrant) {
            index = 1;
        }
        else if (bottomQuadrant) {
            index = 2;
        }
    }
    else if (inRect.origin.x > verticalMidpoint) {
        if (topQuadrant) {
            index = 0;
        }
        else if (bottomQuadrant) {
            index = 3;
        }
    }
    
    return index;
}

-(void)insert:(CGRect)inRect
{
    if ([nodes objectAtIndex:0] != NULL) {
        int index = [self getIndex:inRect];
        
        if (index != -1) {
            [[nodes objectAtIndex:index] insert:inRect];
            
            return;
        }
    }
    
    [objects addObject:[NSValue valueWithCGRect:inRect]];
    
    if ([objects count] > maxObjects) {
        if ([nodes objectAtIndex:0] == NULL) {
            [self split];
        }
        
        int i = 0;
        while (i < [objects count]) {
            NSValue *value = [objects objectAtIndex:i];
            int index = [self getIndex:value.CGRectValue];
            if (index != -1) {
                [[nodes objectAtIndex:index] insert:value.CGRectValue];
                [objects removeObject:value];
            }
            else {
                i++;
            }
        }
    }
}

@end
