//
//  Simulator.m
//  cocos2d-normal
//
//  Created by Laurence Wong on 11/4/13.
//  Copyright (c) 2013 Instructor. All rights reserved.
//

#import "Simulator.h"
#import "WaitingForOrder.h"
#import "QuietLog.h"


@implementation Simulator

@synthesize currentLayerToAddThingsTo = currentLayerToAddThingsTo_;
@synthesize charactersDoneMoving = charactersDoneMoving_;
@synthesize simulatorState = simulatorState_;

+(Simulator *)sharedSimulator
{
    static Simulator *sharedSimulator;
    
    if(!sharedSimulator)
    {
        sharedSimulator = [[Simulator alloc] init];
    }
    return sharedSimulator;
}

- (id)init
{
    self = [super init];
    if (self) {
        nextActionerID = 0;
        gameObjects = [[NSMutableDictionary alloc] init];
        characterObjects = [[NSMutableDictionary alloc] init];
        battles = [[NSMutableArray alloc] init];
        playerUnits = [[NSMutableArray alloc] init];
        
        maxTimeToSimulate = 5.0f;
        simulationTimeDivisions = 5;
        self.simulatorState = TacticalState;
        currentlySimulatingBattle = nil;
        //temp code
        
        
        //end temp code
    }
    return self;
}

-(int)initializePlayer
{
    [playerUnits addObject:[[NSMutableDictionary alloc] init]];
    return [playerUnits count] - 1;
}

-(GameObject *)getGameObject:(NSNumber *)inActionerID
{
    return [gameObjects objectForKey:inActionerID];
}
-(CharacterObject *)getCharacterObject:(NSNumber *)inActionerID
{
    return [characterObjects objectForKey:inActionerID];
}
-(NSArray *)getUnitsForPlayer:(int)inPlayerID
{
    NSMutableDictionary *playersControlledUnits = [playerUnits objectAtIndex:inPlayerID];
    return [playersControlledUnits allValues];
}

-(int)addGameObject:(GameObject *)inGameObject
{
    [gameObjects setObject:inGameObject forKey:[NSNumber numberWithInt:nextActionerID]];
    inGameObject.actionerID = nextActionerID;
    [[self currentLayerToAddThingsTo] addChild:inGameObject];
    return nextActionerID++;
}

-(int)addCharacterObject:(CharacterObject *)inCharacterObject forPlayer:(int)inPlayerID;
{
    [characterObjects setObject:inCharacterObject forKey:[NSNumber numberWithInt:nextActionerID]];
    NSMutableDictionary *playersUnits = [playerUnits objectAtIndex:inPlayerID];
    [playersUnits setObject:inCharacterObject forKey:[NSNumber numberWithInt:nextActionerID]];
    [[self currentLayerToAddThingsTo] addChild:inCharacterObject z:10];
    inCharacterObject.actionerID = nextActionerID;
    return nextActionerID++;
}
-(void)battleDone:(Battle *)battle
{
    [battles removeObject:battle];
    if([battles count] > 0)
    {
        QuietLog(@"A battle finished and another one exists. Starting new battle");
        Battle *newBattle = [battles objectAtIndex:0];
        [newBattle startRunningBattle];
        currentlySimulatingBattle = newBattle;
    }
    else
    {
        QuietLog(@"A battle finished and no more battles exist.");
        currentlySimulatingBattle = nil;
    }
}

-(void)characterIsDoneMoving:(CharacterObject *)character
{
    //QuietLog(@"Character %d is done moving", [character actionerID]);
    ++self.charactersDoneMoving;
    for(Battle *b in battles)
    {
        if([b containsCombatant:[character actionerID]])
        {
            b.numFinishedCombatants++;
            break;
        }
    }
}

-(void)addBattle:(int)inActionerID1 with:(int)inActionerID2
{
    for(Battle *bo in battles)
    {
        if([bo containsCombatant:inActionerID1])
        {
            //QuietLog(@"Found existing battle");
            [bo addCombatant:inActionerID2];
            [nonCombatCharacters removeObject:[self getCharacterObject:[NSNumber numberWithInt:inActionerID2]]];

            return;
        }
        else if([bo containsCombatant:inActionerID2])
        {
            //QuietLog(@"Found existing battle");
            [bo addCombatant:inActionerID1];
            [nonCombatCharacters removeObject:[self getCharacterObject:[NSNumber numberWithInt:inActionerID1]]];

            return;
        }
    }
    //QuietLog(@"Adding new battle with character %d and character %d", inActionerID1, inActionerID2);
    Battle *newBattleObject = [[Battle alloc] initWithCombatants:inActionerID1 and:inActionerID2];
    [battles addObject:newBattleObject];
    [nonCombatCharacters removeObject:[self getCharacterObject:[NSNumber numberWithInt:inActionerID1]]];
    [nonCombatCharacters removeObject:[self getCharacterObject:[NSNumber numberWithInt:inActionerID2]]];
}

-(CharacterObject *)findCharacterByTouch:(CGPoint)worldSpaceTouch
{
    for( NSNumber *n in characterObjects )
    {
        CharacterObject *tempCharacter = [characterObjects objectForKey:n];
        if(ccpLengthSQ(ccpSub(worldSpaceTouch, [tempCharacter position])) < powf([tempCharacter innerHitCircleRadius], 2.0))
        {
            tempCharacter.isSelected = YES;
            return tempCharacter;
        }
    }
    return nil;
}

-(void)update:(ccTime)delta
{
    switch(self.simulatorState)
    {
        case TacticalState:
            break;
        case PreSimState:
            break;
        case CombatState:
            for( NSNumber *n in characterObjects )
            {
                CharacterObject *tempCharacter = [characterObjects objectForKey:n];
                [tempCharacter update:delta];
            }
            if(currentlySimulatingBattle)
            {
                [currentlySimulatingBattle update:delta];
            }
            if(self.charactersDoneMoving == [characterObjects count])
            {
                //tell spritelayer that i'm done
                self.simulatorState = TacticalState;
                for( NSNumber *n in characterObjects )
                {
                    CharacterObject *tempCharacter = [characterObjects objectForKey:n];
                    [tempCharacter setState:[[WaitingForOrder alloc] init]];
                }
            }
            break;
        default:
            break;
    }
}

-(void)preSimulate
{
    QuietLog(@"Running Pre-Simulation");
    self.simulatorState = PreSimState;
    //do cleanup for last turn
    [battles removeAllObjects];
    nonCombatCharacters = [[NSMutableArray arrayWithArray:[characterObjects allValues]]retain];
    float currentSimulationTime = 1.0/simulationTimeDivisions;
    while(currentSimulationTime < maxTimeToSimulate)
    {
        for( NSNumber *n1 in characterObjects )
        {
            CharacterObject *tempCharacter = [characterObjects objectForKey:n1];
            [tempCharacter setPositionToTime:currentSimulationTime];
        }
        currentSimulationTime += 1.0/simulationTimeDivisions;
        
        for( NSNumber *n in characterObjects )
        {
            CharacterObject *tempCharacter = [characterObjects objectForKey:n];
            //QuietLog(@"Doing presim for character %d", [tempCharacter actionerID]);
            for(int i = 0; i < [playerUnits count]; i++)
            {
                if(i != [tempCharacter playerID])
                {
                    NSMutableDictionary *otherPlayerUnits = [playerUnits objectAtIndex:i];
                    for( NSNumber *n1 in otherPlayerUnits )
                    {
                        CharacterObject *tempCharacter1 = [characterObjects objectForKey:n1];
                        if([tempCharacter hasPreCollisionWith:tempCharacter1])
                        {
                            [self addBattle:n.intValue with:n1.intValue];
                        }
                    }
                }
            }
            
            
        }
    }
}

-(void)moveAllCharacters
{
    self.simulatorState = CombatState;
    self.charactersDoneMoving = 0;
    //only loop through nonCombatCharacters
    if([nonCombatCharacters count])
    {
        for(CharacterObject *co in nonCombatCharacters)
        {
            [co startMovement];
        }
    }
    /*
     for( NSNumber *n in characterObjects )
     {
     CharacterObject *tempCharacter = [characterObjects objectForKey:n];
     [tempCharacter startMovement];
     }
     */
    //Start battle and have that battle call a "battleFinished" method to tell the simulator to start the next battle
    if([battles count])
    {
        QuietLog(@"Simulator starting first battle");
        Battle *newBattle = [battles objectAtIndex:0];
        [newBattle startRunningBattle];
        currentlySimulatingBattle = newBattle;
    }
}

-(CharacterObject *)getNearestCollidingCharacterTo:(CharacterObject *)character
{
    for(Battle *b in battles)
    {
        NSMutableArray *battleCombatants = [b combatants];
        for(NSNumber *n in battleCombatants)
        {
            CharacterObject *possibleCollider = [self getCharacterObject:n];
            if([possibleCollider playerID] != [character playerID])
            {
                if([character hasCollisionWith:possibleCollider])
                {
                    return possibleCollider;
                }
            }
        }
    }
    return nil;
}

-(void) cullDeadCharactersInLayerLayer:(CCLayer *)layer
{
    for(CharacterObject *c in [characterObjects allValues]) {
        if(c.isDead) {
            [layer removeChild:c cleanup:YES];
            [characterObjects removeObjectForKey:[NSNumber numberWithInt:c.actionerID]];
        }
    }
}

-(NSArray *) getAllCharacterIDs
{
    return [characterObjects allKeys];
}

-(NSArray *) getAllCharacterObjects
{
    return [characterObjects allValues];
}

- (void)dealloc
{
    
    for( NSNumber *key in gameObjects)
    {
        [[gameObjects objectForKey:key] dealloc];
    }
    [gameObjects release];
    
    [battles release];
    
    [super dealloc];
}
@end
