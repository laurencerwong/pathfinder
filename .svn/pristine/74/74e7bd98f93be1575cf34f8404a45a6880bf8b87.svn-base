//
//  SpriteLayer.m
//  cocos2d-normal
//
//  Created by Keith DeRuiter on 11/5/13.
//  Copyright 2013 Instructor. All rights reserved.
//

#import "SpriteLayer.h"
#import "Simulator.h"


@implementation SpriteLayer

@synthesize camera = camera_;
@synthesize tileMapLayer = tileMapLayer_;

- (id)init
{
    self = [super init];
    if (self) {
        [self initializeCamera];
        self.touchEnabled = YES;
        movingMap = NO;
        
        touchPath = [[CCPointArray alloc] init];
        splinePath = [[CCPointArray alloc] init];
        characters = [[NSMutableArray alloc]init];
        [Simulator sharedSimulator].currentLayerToAddThingsTo = self;
        touchesMovedCounter = 0;
        MaxTouchesMovedCounter = 5; //every 5 touches moved, record point
        //temp code start
        
        [characters addObject:[NSNumber numberWithInt:[CharacterObject characterObjectWithFile:@"Icon-72.png"]] ];
        CharacterObject *tempCharacter = (CharacterObject *)[[Simulator sharedSimulator] getGameObject:0];
        tempCharacter.position = ccp(50, 50);
        
        //temp code end
    }
    return self;
}

-(void) update:(ccTime)delta
{
    [self.camera update:delta];
}

-(void) draw
{
    [super draw];
    
    ccDrawColor4B(0, 255, 0, 255);
    ccDrawSolidCircle(self.camera.position, 5, 12);
    ccDrawColor4B(255, 0, 0, 255);
    ccDrawSolidCircle(self.camera.desiredPosition, 5, 12);
    ccDrawColor4B(255, 0, 255, 255);
    ccDrawSolidCircle(tempPoint, 5, 12);
    CGSize s = [[CCDirector sharedDirector] winSize];
    CGPoint BLBound = ccp(s.width/2, s.height/2);
    CGPoint TRBound = ccp(self.boundingBox.size.width - s.width/2, self.boundingBox.size.height - s.height/2);
    ccDrawRect(BLBound, TRBound);
    
    if([splinePath count] > 2)
    {
        
        ccDrawColor4B(0, 255, 0, 175);
        glLineWidth(10.0f);
        for(int i = 0; i < [splinePath count] - 1; ++i)
        {
            CGPoint point0, point1;
            point0 = [splinePath getControlPointAtIndex:i];
            point1 = [splinePath getControlPointAtIndex:i + 1];
            ccDrawLine(point0, point1);
        }
    }
}

-(void) initializeCamera
{
    CGSize s = [[CCDirector sharedDirector] winSize];
    self.camera = [CameraDummyObject node];
    self.camera.position = ccp(0, s.height/2);
    [self addChild: self.camera];
}

-(void) registerWithTouchDispatcher {
    [[CCDirector sharedDirector].touchDispatcher addTargetedDelegate:self priority:INT_MIN+1 swallowsTouches:YES];
}

-(BOOL) ccTouchBegan:(UITouch *)touch withEvent:(UIEvent *)event
{
    movingMap = NO;
    initialTouchLocation = [self convertTouchToNodeSpace: touch];
    
    //Path drawing code begin

    
    //find object that you touched
    CGSize s = [[CCDirector sharedDirector] winSize];
    CGPoint tempTouchPoint = ccpAdd(initialTouchLocation, ccpSub(ccp(s.width/2, s.height/2), self.camera.position));
    tempPoint = tempTouchPoint;
    GameObject *tempObject = [[Simulator sharedSimulator] findObjectByTouch:tempTouchPoint];
    if(tempObject != NULL)
    {
        if(currentlySelectedCharacter == (CharacterObject *)tempObject)
        {
            [currentlySelectedCharacter startMovement];
        }
        else
        {
            currentlySelectedCharacter = (CharacterObject *)tempObject;
            [currentlySelectedCharacter resetPath];
            CGPoint location = [self convertTouchToNodeSpace: touch];
            [[currentlySelectedCharacter touchPath] addControlPoint:ccpSub(location, ccp(1, 1))]; //need a "ghost" point so that the sprite starts at the location touched
            [touchPath addControlPoint:ccpSub(location, ccp(1, 1))];
            [touchPath addControlPoint:location ]; //push touch point onto touchpath
            [[currentlySelectedCharacter touchPath] addControlPoint:location];
        }
    }
    else
    {
        [[touchPath controlPoints] removeAllObjects];
        [[splinePath controlPoints] removeAllObjects];
        currentlySelectedCharacter = NULL;
        movingMap = YES;
    }
    //Path drawing code end
    
    return YES;
}

-(void) ccTouchMoved:(UITouch *)touch withEvent:(UIEvent *)event
{
    
    //Camera movement
    CGSize s = [[CCDirector sharedDirector] winSize];
    CGPoint touchLocation = [self convertTouchToNodeSpace: touch];
    CGPoint drag = ccpSub(initialTouchLocation, touchLocation);
    CGPoint desiredPosition = ccpAdd(drag, self.camera.position);
    CGPoint center = ccp(s.width/2, s.height/2);
    CGSize mapSize = self.tileMapLayer.tileMap.contentSize;
    
    //spline stuff begin
    
    if(currentlySelectedCharacter != NULL)
    {
        if(touchesMovedCounter == MaxTouchesMovedCounter || ccpDistanceSQ(touchLocation, [touchPath getControlPointAtIndex:[touchPath count] - 1]) > 100 )
        {
            [touchPath addControlPoint:touchLocation];
            [[currentlySelectedCharacter touchPath] addControlPoint:touchLocation];
            touchesMovedCounter = 0;
            
            CGPoint predictedLocation = touchLocation;
            predictedLocation = ccpAdd(predictedLocation, ccpSub([touchPath getControlPointAtIndex:[touchPath count] - 2], predictedLocation)); //add predicted point
            [touchPath addControlPoint:predictedLocation];
            [self createSplineFromPoints:touchPath];
            [touchPath removeControlPointAtIndex:[touchPath count] -1]; //remove predicted point
        }
        else
        {
            ++touchesMovedCounter;
        }
    }
    //BOunds checking against the map to not move offscreen
    if(desiredPosition.x < (center.x)) {  //LEFT
        desiredPosition.x = center.x;
    }
    if(desiredPosition.x > (mapSize.width - center.x)) {  //RIGHT
        desiredPosition.x = mapSize.width - center.x;
    }
    if(desiredPosition.y > (mapSize.height - center.y)) {  //UP
        desiredPosition.y = mapSize.height - center.y;
    }
    if(desiredPosition.y < (center.y)) {  //DOWN
        desiredPosition.y = center.y;
    }
    if(movingMap)
    {
        self.camera.desiredPosition = desiredPosition;
    }
}

-(void) ccTouchEnded:(UITouch *)touch withEvent:(UIEvent *)event
{
    movingMap = NO;
    
    if(currentlySelectedCharacter != NULL)
    {
        CGPoint location = [self convertTouchToNodeSpace: touch];
        [touchPath addControlPoint: location];
        [[currentlySelectedCharacter touchPath] addControlPoint:location];
        [self createSplineFromPoints:touchPath];
        [currentlySelectedCharacter generateSpline];
    }
    //[self calculateSpeedsFromPoints:splinePath];
    
}


-(void)createSplineFromPoints:(CCPointArray *)inPoints
{
    [[splinePath controlPoints] removeAllObjects];
    //    NSLog(@"Calculating spline for %d points", [inPoints count]);
    [splinePath addControlPoint: [inPoints getControlPointAtIndex:0]];
    CGPoint point0, point1, point2, point3;
    if([inPoints count] < 4)
    {
        //not enough points for spline
        return;
    }
    for(int i = 0; i < [inPoints count] - 3; ++i)
    {
        point0 = [inPoints getControlPointAtIndex:i];
        point1 = [inPoints getControlPointAtIndex:i + 1];
        point2 = [inPoints getControlPointAtIndex:i + 2];
        point3 = [inPoints getControlPointAtIndex:i + 3];
        for(int j = 1; j < 5; ++j)
        {
            float t = j/5.0;
            //(P3 - P0 + 3*P1- 3*P2) * t^3
            
            CGPoint newPoint0 = point3;
            newPoint0 = ccpSub(newPoint0, point0);
            newPoint0 = ccpAdd(newPoint0, ccpMult(point1, 3));
            newPoint0 = ccpAdd(newPoint0, ccpMult(point2, -3));
            newPoint0 = ccpMult(newPoint0, powf(t, 3));
            
            // + (2*P0 - 5*P1 + 4*P2 - P3) * t^2
            CGPoint newPoint1 = ccpMult(point0, 2);
            newPoint1 = ccpAdd(newPoint1, ccpMult(point1, -5));
            newPoint1 = ccpAdd(newPoint1, ccpMult(point2, 4));
            newPoint1 = ccpSub(newPoint1, point3);
            newPoint1 = ccpMult(newPoint1, powf(t, 2));
            
            // + (-P0 + P2) * t
            CGPoint newPoint2 = ccpSub(point2, point0);
            newPoint2 = ccpMult(newPoint2, t);
            
            // + (2 * P1)
            newPoint2 = ccpAdd(newPoint2, ccpMult(point1, 2));
            newPoint2 = ccpAdd(newPoint2, newPoint1);
            newPoint2 = ccpAdd(newPoint2, newPoint0);
            newPoint2 = ccpMult(newPoint2, 0.5);
            
            [splinePath addControlPoint:newPoint2];
        }
    }
    NSLog(@"splinePath size = %d", [splinePath count]);
}


@end
