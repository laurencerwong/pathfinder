//
//  CharacterObject.m
//  cocos2d-normal
//
//  Created by Laurence Wong on 11/4/13.
//  Copyright (c) 2013 Instructor. All rights reserved.
//

#import "CharacterObject.h"

@implementation CharacterObject

@synthesize touchPath = touchPath_;

//temp code begin
@synthesize preSimPoint = currentPreSimPosition;
//temp code end

+(int)characterObjectWithFile:(NSString *)filename
{
    return [[self alloc] initializeWithFile:filename];
}

-(int)initializeWithFile:(NSString *)filename
{
    self = [super initWithFile:filename];
    if (self) {
        touchPath_ = [[CCPointArray alloc] init];
        distancesBetweenPoints = [[NSMutableArray alloc] init];
        
        lastTime = 0.0f;
        lastKnownControlPointIndex = 0;
        lastRemainingDistance = 0;
        innerHitCircleRadius = [self contentSize].width/2;
    }
    return [[Simulator sharedSimulator] addGameObject:self];
}

-(void) calculateSpeedsFromPoints:(CCPointArray *)inPoints
{
    NSMutableArray *speedArray = [[[NSMutableArray alloc] init] autorelease];
    
    desiredSpeed = 100.0f; //TODO get this from stats
    
    float firstDistance = ccpDistance([inPoints getControlPointAtIndex:1], [inPoints getControlPointAtIndex:0]);
    
    [distancesBetweenPoints addObject:[NSNumber numberWithFloat:firstDistance]];
    
    float time = firstDistance / desiredSpeed;
    [speedArray addObject:[CCMoveTo actionWithDuration:time position:[inPoints getControlPointAtIndex:1]]];
    for(int i = 2; i < [inPoints count]; ++i)
    {
        float nextDistance = ccpDistance([inPoints getControlPointAtIndex:i], [inPoints getControlPointAtIndex:i - 1]);
        [distancesBetweenPoints addObject:[NSNumber numberWithFloat:nextDistance]];
        float newTime = nextDistance / desiredSpeed;
        [speedArray addObject:[CCMoveTo actionWithDuration:newTime position:[inPoints getControlPointAtIndex:i]]];
    }
    movementAlongSpline = [CCSequence actionWithArray:speedArray];
}

-(void)createSplineFromPoints:(CCPointArray *)inPoints
{
    CCPointArray *splinePath = [[CCPointArray alloc] init];
    //    NSLog(@"Calculating spline for %d points", [inPoints count]);
    [splinePath addControlPoint: [inPoints getControlPointAtIndex:0]];
    CGPoint point0, point1, point2, point3;
    if([inPoints count] < 4)
    {
        //not enough points for spline
        return;
    }
    for(int i = 0; i < [inPoints count] - 3; ++i)
    {
        float distanceFromPoint1ToPoint2 = 0;
        point0 = [inPoints getControlPointAtIndex:i];
        point1 = [inPoints getControlPointAtIndex:i + 1];
        point2 = [inPoints getControlPointAtIndex:i + 2];
        point3 = [inPoints getControlPointAtIndex:i + 3];
        
        CGPoint lastInterpolatedPoint = point1;
        for(int j = 1; j < 5; ++j)
        {
            float t = j/5.0;
            //(P3 - P0 + 3*P1- 3*P2) * t^3
            
            CGPoint newPoint0 = point3;
            newPoint0 = ccpSub(newPoint0, point0);
            newPoint0 = ccpAdd(newPoint0, ccpMult(point1, 3));
            newPoint0 = ccpAdd(newPoint0, ccpMult(point2, -3));
            newPoint0 = ccpMult(newPoint0, powf(t, 3));
            
            // + (2*P0 - 5*P1 + 4*P2 - P3) * t^2
            CGPoint newPoint1 = ccpMult(point0, 2);
            newPoint1 = ccpAdd(newPoint1, ccpMult(point1, -5));
            newPoint1 = ccpAdd(newPoint1, ccpMult(point2, 4));
            newPoint1 = ccpSub(newPoint1, point3);
            newPoint1 = ccpMult(newPoint1, powf(t, 2));
            
            // + (-P0 + P2) * t
            CGPoint newPoint2 = ccpSub(point2, point0);
            newPoint2 = ccpMult(newPoint2, t);
            
            // + (2 * P1)
            newPoint2 = ccpAdd(newPoint2, ccpMult(point1, 2));
            newPoint2 = ccpAdd(newPoint2, newPoint1);
            newPoint2 = ccpAdd(newPoint2, newPoint0);
            newPoint2 = ccpMult(newPoint2, 0.5);
            
            [splinePath addControlPoint:newPoint2];
            distanceFromPoint1ToPoint2 += ccpDistance(lastInterpolatedPoint, newPoint2);
            lastInterpolatedPoint = newPoint2;
        }
        [distancesBetweenPoints addObject:[NSNumber numberWithFloat:distanceFromPoint1ToPoint2]];
    }
    [self calculateSpeedsFromPoints:splinePath];
    //lastKnownControlPoint = [inPoints getControlPointAtIndex:1];
    //    NSLog(@"splinePath size = %d", [splinePath count]);
}

-(void)generateSpline
{
    CCPointArray *splinePath = [[CCPointArray alloc] init];
    //    NSLog(@"Calculating spline for %d points", [inPoints count]);
    [splinePath addControlPoint: [[self touchPath] getControlPointAtIndex:0]];
    CGPoint point0, point1, point2, point3;
    if([[self touchPath] count] < 4)
    {
        //not enough points for spline
        return;
    }
    for(int i = 0; i < [[self touchPath] count] - 3; ++i)
    {
        float distanceFromPoint1ToPoint2 = 0;
        point0 = [[self touchPath] getControlPointAtIndex:i];
        point1 = [[self touchPath] getControlPointAtIndex:i + 1];
        point2 = [[self touchPath] getControlPointAtIndex:i + 2];
        point3 = [[self touchPath] getControlPointAtIndex:i + 3];
        
        CGPoint lastInterpolatedPoint = point1;
        for(int j = 1; j < 5; ++j)
        {
            float t = j/5.0;
            //(P3 - P0 + 3*P1- 3*P2) * t^3
            
            CGPoint newPoint0 = point3;
            newPoint0 = ccpSub(newPoint0, point0);
            newPoint0 = ccpAdd(newPoint0, ccpMult(point1, 3));
            newPoint0 = ccpAdd(newPoint0, ccpMult(point2, -3));
            newPoint0 = ccpMult(newPoint0, powf(t, 3));
            
            // + (2*P0 - 5*P1 + 4*P2 - P3) * t^2
            CGPoint newPoint1 = ccpMult(point0, 2);
            newPoint1 = ccpAdd(newPoint1, ccpMult(point1, -5));
            newPoint1 = ccpAdd(newPoint1, ccpMult(point2, 4));
            newPoint1 = ccpSub(newPoint1, point3);
            newPoint1 = ccpMult(newPoint1, powf(t, 2));
            
            // + (-P0 + P2) * t
            CGPoint newPoint2 = ccpSub(point2, point0);
            newPoint2 = ccpMult(newPoint2, t);
            
            // + (2 * P1)
            newPoint2 = ccpAdd(newPoint2, ccpMult(point1, 2));
            newPoint2 = ccpAdd(newPoint2, newPoint1);
            newPoint2 = ccpAdd(newPoint2, newPoint0);
            newPoint2 = ccpMult(newPoint2, 0.5);
            
            [splinePath addControlPoint:newPoint2];
            distanceFromPoint1ToPoint2 += ccpDistance(lastInterpolatedPoint, newPoint2);
            lastInterpolatedPoint = newPoint2;
        }
        [distancesBetweenPoints addObject:[NSNumber numberWithFloat:distanceFromPoint1ToPoint2]];
    }
    [self calculateSpeedsFromPoints:splinePath];
    //lastKnownControlPoint = [inPoints getControlPointAtIndex:1];
    //    NSLog(@"splinePath size = %d", [splinePath count]);
}


-(void)update:(ccTime)delta
{
    //[currentState update:delta];
}

-(void)setPositionToTime:(float)t
{
    float delta = t - lastTime;
    if(delta == 0)
    {
        assert(false && @"lastTime cannot be equal to t");
    }
    lastTime = t;
    float distanceTraveledAlongSpline = desiredSpeed * delta;
    float interpolateAmount = 0;
    int startingControlPoint = 0; //starting control point to interpolate over
    
    //move up to next control point if I start between two control points
    if(lastRemainingDistance > 0)
    {
        NSNumber *lastDistance = [distancesBetweenPoints objectAtIndex:lastKnownControlPointIndex];
        distanceTraveledAlongSpline -= lastDistance.floatValue - lastRemainingDistance;
        lastKnownControlPointIndex++;
    }
    
    //move along spline
    for(int i = lastKnownControlPointIndex; i < [distancesBetweenPoints count] - 3; ++i)
    {
        NSNumber *n = [distancesBetweenPoints objectAtIndex:i];
        if(distanceTraveledAlongSpline - n.floatValue < 0)
        {
            //you've moved up til the last known control point
            startingControlPoint = i;
            interpolateAmount = distanceTraveledAlongSpline/n.floatValue;
            lastRemainingDistance = distanceTraveledAlongSpline;
            lastKnownControlPointIndex = i;
            break;
        }
        else
        {
            distanceTraveledAlongSpline -= n.floatValue;
        }
    }
    if(interpolateAmount == 0) //reached end of spline
    {
        startingControlPoint = [[self touchPath] count] - 3;
        interpolateAmount = 1.0f;
    }
    
    //calculate final position on spline
    
    //(P3 - P0 + 3*P1- 3*P2) * t^3
    CGPoint point0 = [[self touchPath] getControlPointAtIndex:startingControlPoint];
    CGPoint point1 = [[self touchPath] getControlPointAtIndex:startingControlPoint + 1];
    CGPoint point2 = [[self touchPath] getControlPointAtIndex:startingControlPoint + 2];
    CGPoint point3 = [[self touchPath] getControlPointAtIndex:startingControlPoint + 3];
    CGPoint newPoint0 = point3;
    newPoint0 = ccpSub(newPoint0, point0);
    newPoint0 = ccpAdd(newPoint0, ccpMult(point1, 3));
    newPoint0 = ccpAdd(newPoint0, ccpMult(point2, -3));
    newPoint0 = ccpMult(newPoint0, powf(interpolateAmount, 3));
    
    // + (2*P0 - 5*P1 + 4*P2 - P3) * t^2
    CGPoint newPoint1 = ccpMult(point0, 2);
    newPoint1 = ccpAdd(newPoint1, ccpMult(point1, -5));
    newPoint1 = ccpAdd(newPoint1, ccpMult(point2, 4));
    newPoint1 = ccpSub(newPoint1, point3);
    newPoint1 = ccpMult(newPoint1, powf(interpolateAmount, 2));
    
    // + (-P0 + P2) * t
    CGPoint newPoint2 = ccpSub(point2, point0);
    newPoint2 = ccpMult(newPoint2, interpolateAmount);
    
    // + (2 * P1)
    newPoint2 = ccpAdd(newPoint2, ccpMult(point1, 2));
    newPoint2 = ccpAdd(newPoint2, newPoint1);
    newPoint2 = ccpAdd(newPoint2, newPoint0);
    newPoint2 = ccpMult(newPoint2, 0.5);
    
    currentPreSimPosition = newPoint2;
    
}

-(void)resetPath
{
    [[[self touchPath] controlPoints] removeAllObjects];
    [distancesBetweenPoints removeAllObjects];
    
    lastTime = 0.0f;
    lastKnownControlPointIndex = 0;
    lastRemainingDistance = 0;
    currentPreSimPosition = [self position];
}

-(void)startMovement
{
    [self stopAllActions];
    [self runAction:movementAlongSpline];
}


@end
