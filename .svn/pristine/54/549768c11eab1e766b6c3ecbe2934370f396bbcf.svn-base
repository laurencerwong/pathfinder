//
//  Simulator.m
//  cocos2d-normal
//
//  Created by Laurence Wong on 11/4/13.
//  Copyright (c) 2013 Instructor. All rights reserved.
//

#import "Simulator.h"


@implementation Simulator

@synthesize currentLayerToAddThingsTo = currentLayerToAddThingsTo_;

+(Simulator *)sharedSimulator
{
    static Simulator *sharedSimulator;
    
    if(!sharedSimulator)
    {
        sharedSimulator = [[Simulator alloc] init];
    }
    return sharedSimulator;
}

- (id)init
{
    self = [super init];
    if (self) {
        nextActionerID = 0;
        gameObjects = [[NSMutableDictionary alloc] init];
        characterObjects = [[NSMutableDictionary alloc] init];
        battles = [[NSMutableArray alloc] init];
        
        maxTimeToSimulate = 5.0f;
        simulationTimeDivisions = 5;
        //temp code
        
        
        //end temp code
    }
    return self;
}

-(GameObject *)getGameObject:(int)inActionerID
{
    return [gameObjects objectForKey:[NSNumber numberWithInt:inActionerID]];
}
-(CharacterObject *)getCharacterObject:(int)inActionerID
{
    return [characterObjects objectForKey:[NSNumber numberWithInt:inActionerID]];
}

-(int)addGameObject:(GameObject *)inGameObject
{
    [gameObjects setObject:inGameObject forKey:[NSNumber numberWithInt:nextActionerID]];
    if([inGameObject isKindOfClass:[CharacterObject class]])
    {
        [characterObjects setObject:inGameObject forKey:[NSNumber numberWithInt:nextActionerID]];
    }
    [[self currentLayerToAddThingsTo] addChild:inGameObject];
    return nextActionerID++;
}

-(void)addBattle:(int)inActionerID1 with:(int)inActionerID2
{
    for(Battle *bo in battles)
    {
        if([bo containsCombatant:inActionerID1])
        {
            NSLog(@"Found existing battle");
            [bo addCombatant:inActionerID2];
            return;
        }
        else if([bo containsCombatant:inActionerID2])
        {
            NSLog(@"Found existing battle");
            [bo addCombatant:inActionerID1];
            return;
        }
    }
    NSLog(@"Adding new battle");
    Battle *newBattleObject = [[Battle alloc] initWithCombatants:inActionerID1 and:inActionerID2];
    [battles addObject:newBattleObject];
}

-(CharacterObject *)findCharacterByTouch:(CGPoint)worldSpaceTouch
{
    for( NSNumber *n in characterObjects )
    {
        CharacterObject *tempCharacter = [characterObjects objectForKey:n];
        if(ccpLengthSQ(ccpSub(worldSpaceTouch, [tempCharacter position])) < powf([tempCharacter innerHitCircleRadius], 2.0))
        {
            return tempCharacter;
        }
    }
    return NULL;
}

-(void)preSimulate
{
    //do cleanup for last turn
    [battles removeAllObjects];
    
    float currentSimulationTime = 1.0/simulationTimeDivisions;
    while(currentSimulationTime < maxTimeToSimulate)
    {
        for( NSNumber *n1 in characterObjects )
        {
            CharacterObject *tempCharacter = [characterObjects objectForKey:n1];
            [tempCharacter setPositionToTime:currentSimulationTime];
        }
        currentSimulationTime += 1.0/simulationTimeDivisions;
        
        for( NSNumber *n in gameObjects )
        {
            GameObject *tempObject = [gameObjects objectForKey:n];
            if([tempObject isKindOfClass:[CharacterObject class]])
            {
                CharacterObject *tempCharacter = (CharacterObject*)tempObject;
                for( NSNumber *n1 in characterObjects )
                {
                    CharacterObject *tempCharacter1 = [characterObjects objectForKey:n1];
                    if( tempCharacter != tempCharacter1)
                    {
                        //if character1 has collision with character2, then add battle
                        if([tempCharacter hasPreCollisionWith:tempCharacter1])
                        {
                            [self addBattle:n.intValue with:n1.intValue];
                        }
                    }
                }
                
            }
            else
            {
                //laksjdf
            }
        }
    }
}

-(void)moveAllCharacters
{
    for( NSNumber *n in characterObjects )
    {
        CharacterObject *tempCharacter = [characterObjects objectForKey:n];
        [tempCharacter startMovement];
    }
}

- (void)dealloc
{
    
    for( NSNumber *key in gameObjects)
    {
        [[gameObjects objectForKey:key] dealloc];
    }
    [gameObjects dealloc];
    
    [battles dealloc];
    
    [super dealloc];
}
@end
