//
//  SpriteLayer.m
//  cocos2d-normal
//
//  Created by Keith DeRuiter on 11/5/13.
//  Copyright 2013 Instructor. All rights reserved.
//

#import "SpriteLayer.h"
#import "Simulator.h"
#import "Player.h"
#import "QuietLog.h"


@implementation SpriteLayer

@synthesize camera = camera_;
@synthesize tileMapLayer = tileMapLayer_;
@synthesize buttonsPressed = buttonsPressed_;
@synthesize currentlySelectedCharacter = currentlySelectedCharacter_;
@synthesize currentPlayerID = currentPlayerID_;
- (id)init
{
    self = [super init];
    if (self) {
        currentTutorialStep = -1;
        debugDraw = YES;
        self.touchEnabled = YES;
        movingMap = NO;
        currentlySelectedCharacter_ = nil;
        characterSelectionListeners = [[NSMutableArray alloc] init];
        players = [[NSMutableArray alloc] init];
        [Simulator sharedSimulator].currentLayerToAddThingsTo = self;
        touchesMovedCounter = 0;
        MaxTouchesMovedCounter = 5; //every 5 touches moved, record point
        selectedSprite = [CCSprite spriteWithFile:@"SelectedBackground.png"];
        [self addChild:selectedSprite];
        selectedSprite.visible = NO;
        ghostCharacter = [GhostCharacter node]; //we should make ghost character a flag or something to designate taht the character is going to that location
        [self addChild:ghostCharacter z:5];
        pathTextures = [[NSMutableDictionary alloc] init];
        arrowSprite = [CCSprite spriteWithFile:@"PathArrow.png"];
        [self addChild:arrowSprite];
        
        //damageSpriteHandler = [BatchDamageSpriteHandler node];
        [[BatchBattleSpriteHandler sharedBatchBattleSpriteHandler] setLayer: self];
    }
    return self;
}

-(ccColor4F)currentPlayerColor
{
    Player *p = [players objectAtIndex:self.currentPlayerID];
    return p.myColor;
}

-(void) initializeTileMap
{
    CCTMXObjectGroup *objectGroup = [self.tileMapLayer.tileMap objectGroupNamed:@"Objects"];
    NSAssert(objectGroup != nil, @"tile map has no objects object layer");
    
    //temp code start
    
    
    //Adding player code stuffs
    NSDictionary *spawnPointOne = [objectGroup objectNamed:@"SpawnPoint1"];
    int spawnOneX = [spawnPointOne[@"x"] integerValue];
    int spawnOneY = [spawnPointOne[@"y"] integerValue];
    QuietLog(@"Read coordinates: %d, %d", spawnOneX, spawnOneY);
    QuietLog(@"Spawning player at %f,%f", spawnOneX / CC_CONTENT_SCALE_FACTOR(), spawnOneY / CC_CONTENT_SCALE_FACTOR());
    ccColor4F playerColor = ccc4f(0.0, 1.0, 1.0, 1.0);
    [players addObject:[[Player alloc] initWithColor:playerColor]];
    Player *p1 = [players objectAtIndex:0];
    [p1 initializeDefaultCharactersWithPosition:ccp(50, 50)];
    //[p1 initializeDefaultCharactersWithPosition:ccp(spawnOneX / CC_CONTENT_SCALE_FACTOR(), spawnOneY / CC_CONTENT_SCALE_FACTOR())];
    
    NSDictionary *spawnPointTwo = [objectGroup objectNamed:@"SpawnPoint2"];
    int spawnTwoX = [spawnPointTwo[@"x"] integerValue];
    int spawnTwoY = [spawnPointTwo[@"y"] integerValue];
    QuietLog(@"Read coordinates: %d, %d", spawnTwoX, spawnTwoY);
    QuietLog(@"Spawning player at %f,%f", spawnTwoX / CC_CONTENT_SCALE_FACTOR(), spawnTwoY / CC_CONTENT_SCALE_FACTOR());
    playerColor = ccc4f(1.0, 0.45, 0.83, 1.0);
    [players addObject:[[Player alloc] initWithColor:playerColor]];
    Player *p2 = [players objectAtIndex:1];
    [p2 initializeDefaultCharactersWithPosition:ccp(1000, 1000)];
    //[p2 initializeDefaultCharactersWithPosition:ccp(spawnTwoX / CC_CONTENT_SCALE_FACTOR(),spawnTwoY / CC_CONTENT_SCALE_FACTOR())];
    
    
    
    currentPlayerID_ = p1.playerID;
    
}

-(void) update:(ccTime)delta
{
    [self.camera update:delta];
    [[Simulator sharedSimulator] update:delta];
    [[Simulator sharedSimulator] cullDeadCharactersInLayerLayer:self];
    if(currentlySelectedCharacter_ != nil)
    {
        selectedSprite.visible = YES;
        selectedSprite.position = currentlySelectedCharacter_.position;
    }
    else
    {
        selectedSprite.visible = NO;
    }
    if(self.buttonsPressed & MoveButton)
    {
        if(currentlySelectedCharacter_ != nil)
        {
            currentlySelectedCharacter_.mySpline.toColor = ccc4f(1.0, 1.0, 1.0, 1.0);
            currentlySelectedCharacter_.action.type = MoveAction;
        }
    }
    if(self.buttonsPressed & CombatMoveButton)
    {
        if(currentlySelectedCharacter_ != nil)
        {
            currentlySelectedCharacter_.mySpline.toColor = ccc4f(1.0, 0.0, 0.0, 1.0);
            currentlySelectedCharacter_.action.type = CombatMoveAction;
        }
    }
    if(self.buttonsPressed & UseEquipmentButton)
    {
        
    }
    if(self.buttonsPressed & UndoButton)
    {
        lastButtonPressed = UndoButton;
        QuietLog(@"Undo was pressed");
        if(currentlySelectedCharacter_ != nil)
        {
            [currentlySelectedCharacter_ resetPath];
        }
    }
}

-(void) updateTutorial:(ccTime)delta
{
    [self update:delta];
    if(currentTutorialStep == -1) {
        [self setTutorialStep:0];
    } else if(currentTutorialStep == 0 && currentlySelectedCharacter_ != nil) {
        [self setTutorialStep:1];
    }
    else if(currentTutorialStep == 1 && currentlySelectedCharacter_ != nil)
    {
        if([currentlySelectedCharacter_ hasAlreadyMoved])
        {
            [self setTutorialStep:2];
            CCSequence *runStep3 = [CCSequence actions:
                                    [CCDelayTime actionWithDuration:3.0],
                                    [CCCallBlock actionWithBlock:^()
                                     {
                                         [self setTutorialStep:3];
                                     }], nil];
            [self runAction:runStep3];
            
        }
    }
    else if(currentTutorialStep == 3 && self.buttonsPressed & CombatMoveButton)
    {
        [self setTutorialStep:4];
        CCSequence *runStep5 = [CCSequence actions:
                                [CCDelayTime actionWithDuration:4.0],
                                [CCCallBlock actionWithBlock:^()
                                 {
                                     [self setTutorialStep:5];
                                 }], nil];
        [self runAction:runStep5];
    }
    else if(currentTutorialStep == 5 && self.buttonsPressed & MoveButton)
    {
        [self setTutorialStep:6];
    }
    else if(currentTutorialStep == 6 && self.buttonsPressed & UndoButton)
    {
        [self setTutorialStep:7];
    }
}

-(void) setTutorialStep:(int)newStep
{
    currentTutorialStep = newStep;
    
    switch (newStep) {
        case 0:
            [self runTutorialStepZero];
            break;
        case 1:
            [self runTutorialStepOne];
            break;
        case 2:
            [self runTutorialStepTwo];
            break;
        case 3:
            [self runTutorialStepThree];
            break;
        case 4:
            [self runTutorialStepFour];
            break;
        case 5:
            [self runTutorialStepFive];
            break;
        case 6:
            [self runTutorialStepSix];
            break;
        case 7:
            [self runTutorialStepSeven];
            break;
        default:
            break;
    }
}

-(void) runTutorialStepZero
{
    QuietLog(@"Running Tutorial Step 0");
    CGSize s = [[CCDirector sharedDirector] winSize];
    
    [[BatchBattleSpriteHandler sharedBatchBattleSpriteHandler] displayTimedMessage:@"WELCOME TO THE TUTORIAL! Touch a character to begin." originatingFrom:ccp(s.width/2, s.height/2) withTimeout:3.0f];
}

-(void) runTutorialStepOne
{
    QuietLog(@"Running Tutorial Step 1");
    [[BatchBattleSpriteHandler sharedBatchBattleSpriteHandler] displayTimedMessage:@"HI\nTouch and drag any player on your team to set a path for them.  You have a limited amount of energy to use on each path (see blue bar)." originatingFrom:currentlySelectedCharacter_.position withTimeout:5.0f];
}

-(void) runTutorialStepTwo
{
    QuietLog(@"Running Tutorial Step 2");
    [[BatchBattleSpriteHandler sharedBatchBattleSpriteHandler] displayTimedMessage:@"Thank for moving me!\nWhen both players have ended their turns, I will move along the path you drew" originatingFrom:currentlySelectedCharacter_.position withTimeout:3.0f];
}

-(void) runTutorialStepThree
{
    QuietLog(@"Running Tutorial Step 3");
    [[BatchBattleSpriteHandler sharedBatchBattleSpriteHandler] displayTimedMessage:@"Touch the Combat button with the sword to make this a combat move" originatingFrom:currentlySelectedCharacter_.position withTimeout:4.0f];
}

-(void) runTutorialStepFour
{
    QuietLog(@"Running Tutorial Step 4");
    [[BatchBattleSpriteHandler sharedBatchBattleSpriteHandler] displayTimedMessage:@"Combat moves mean your player will stop and fight if he collides with an enemy" originatingFrom: ccp(400,40) withTimeout:3.0f];
}

-(void) runTutorialStepFive
{
    QuietLog(@"Running Tutorial Step 5");
    [[BatchBattleSpriteHandler sharedBatchBattleSpriteHandler] displayTimedMessage:@"Touch the blank button to change your combat move to a non-combat path" originatingFrom: ccp(370,35) withTimeout:3.0f];
}

-(void) runTutorialStepSix
{
    QuietLog(@"Running Tutorial Step 6");
    [[BatchBattleSpriteHandler sharedBatchBattleSpriteHandler] displayTimedMessage:@"Touch the Undo button to redraw your path" originatingFrom: ccp(430,35) withTimeout:3.0f];
}

-(void) runTutorialStepSeven
{
    QuietLog(@"Running Tutorial Step 6");
    [[BatchBattleSpriteHandler sharedBatchBattleSpriteHandler] displayTimedMessage:@"Redraw the path for your character and the paths for the rest of your characters before hitting 'End Turn'" originatingFrom:currentlySelectedCharacter_.position withTimeout:4.0f];
}

-(BOOL) allPlayersFinished
{
    if(numFinishedPlayers_ == [players count])
    {
        return YES;
    }
    return NO;
}

-(void) startNewRound
{
    numFinishedPlayers_ = 0;
    currentPlayerID_ = 0;
}

-(void) endTurn
{
    //    [self setRestOfPlayersUnitsToIdle];
    
    numFinishedPlayers_++;
    NSArray *playerUnits = [[Simulator sharedSimulator] getUnitsForPlayer:currentPlayerID_];
    for(CharacterObject *co in playerUnits)
    {
        [co fadeOutSpline];
        if(![co hasAlreadyMoved])
        {
            [co setToBeIdle];
        }
    }
    currentPlayerID_ = currentPlayerID_ + 1;
    QuietLog(@"Now looking at player%d's turn", currentPlayerID_);
    if(currentlySelectedCharacter_ != nil)
    {
        currentlySelectedCharacter_.isSelected = NO;
        currentlySelectedCharacter_ = nil;
    }
    /*for(int i = 0; i < [players count]; ++i)
     {
     NSArray *playerUnits = [[Simulator sharedSimulator] getUnitsForPlayer:i];
     for(CharacterObject *co in playerUnits)
     {
     [co fadeOutSpline];
     
     }
     }
     */
    
    
}

-(void) focusOnFirstUnitForCurrentPlayer
{
    NSArray *playerUnits = [[Simulator sharedSimulator] getUnitsForPlayer:self.currentPlayerID];
    if(playerUnits.count > 0) {
        self.camera.desiredPosition = [self checkBounds:((GameObject*)[playerUnits objectAtIndex:0]).position];
    }
}

-(void)setRestOfPlayersUnitsToIdle
{
    for(int i = 0; i < [players count]; ++i)
    {
        NSArray *playerUnits = [[Simulator sharedSimulator] getUnitsForPlayer:i];
        for(CharacterObject *co in playerUnits)
        {
            if(![co hasAlreadyMoved])
            {
                [co setToBeIdle];
            }
        }
    }
}

-(CharacterObject *)playerHasUnmovedUnit:(int)inPlayerID
{
    NSArray *playerUnits = [[Simulator sharedSimulator] getUnitsForPlayer:inPlayerID];
    for(CharacterObject *co in playerUnits)
    {
        if(![co hasAlreadyMoved])
        {
            return co;
        }
    }
    return nil;
}


-(void) draw
{
    [super draw];
    
    
    
    if(debugDraw)
    {
        //Last Touch Moved Location
        ccDrawColor4B(0, 0, 255, 255);
        //ccDrawPoint(lastTouchMovedLocation);
        //---
        
        ccPointSize(10);
        ccDrawPoint(ccp(50, 50));
        
        //Bounding box that follows a player's spline as you drag
        //glLineWidth(3.0f);
        /*
         ccDrawColor4B(0, 0, 255, 255);
         ccDrawRect(ccp(lastTouchMovedLocation.x - currentlySelectedCharacter_.boundingBox.size.width/2, lastTouchMovedLocation.y - currentlySelectedCharacter_.boundingBox.size.height/2),
         ccp(lastTouchMovedLocation.x + currentlySelectedCharacter_.boundingBox.size.width/2, lastTouchMovedLocation.y + currentlySelectedCharacter_.boundingBox.size.height/2));
         */
        //Draw debug dots
        /*
         ccDrawColor4B(0, 255, 0, 255);
         ccDrawSolidCircle(self.camera.position, 5, 12);
         ccDrawColor4B(255, 0, 0, 255);
         ccDrawSolidCircle(self.camera.desiredPosition, 5, 12);
         ccDrawColor4B(255, 0, 255, 255);
         ccDrawSolidCircle(touchBeginLocation, 5, 12);
         */
        //Draw Ranges
        /*
         for(CharacterObject *tempCharacter in [[Simulator sharedSimulator] getAllCharacterObjects])
         {
         ccDrawCircle([tempCharacter position], [tempCharacter innerHitCircleRadius], 0, 32, NO);
         ccDrawCircle([tempCharacter position], [tempCharacter getRange], 0, 32, NO);
         }*/
        //
        
        //ccDrawColor4B(255, 0, 255, 100);
        //ccPointSize(10);
        /*
         if(currentlySelectedCharacter_ != nil)
         {
         for(int i = 0; i < [[currentlySelectedCharacter_ touchPath]count]; ++i)
         {
         ccDrawPoint([[currentlySelectedCharacter_ touchPath] getControlPointAtIndex:i]);
         }
         }
         */
        //draw rendertexture
        //ccDrawPoint(pathTextureExtremes[0]);
        //ccDrawPoint(pathTextureExtremes[1]);
        //ccDrawColor4B(255, 255, 255, 255);
        //ccDrawPoint(pathTexture.position);
        /*
         ccDrawPoint(ccp(pathTexture.position.x - pathTexture.contentSize.width/2, pathTexture.position.y + pathTexture.contentSize.height/2));
         ccDrawPoint(ccp(pathTexture.position.x + pathTexture.contentSize.width/2, pathTexture.position.y + pathTexture.contentSize.height/2));
         ccDrawPoint(ccp(pathTexture.position.x - pathTexture.contentSize.width/2, pathTexture.position.y - pathTexture.contentSize.height/2));
         ccDrawPoint(ccp(pathTexture.position.x + pathTexture.contentSize.width/2, pathTexture.position.y - pathTexture.contentSize.height/2));
         */
        //end draw rendertexture
        /*
         if([splinePath count] > 2)
         {
         
         ccDrawColor4B(0, 255, 0, 100);
         glLineWidth(10.0f);
         for(int i = 0; i < [splinePath count] - 1; ++i)
         {
         CGPoint point0, point1;
         point0 = [splinePath getControlPointAtIndex:i];
         point1 = [splinePath getControlPointAtIndex:i + 1];
         ccDrawLine(point0, point1);
         }
         }
         */
    }
}

-(void) initializeCamera
{
    self.camera = [CameraDummyObject node];
    self.camera.desiredPosition = [self checkBounds:ccp(0,0)];
    self.camera.position = self.camera.desiredPosition;
    
    [self addChild: self.camera];
    
}

-(void) registerWithTouchDispatcher {
    //the lower the touch priority the faster it gets the touch
    [[CCDirector sharedDirector].touchDispatcher addTargetedDelegate:self priority:0 swallowsTouches:YES];
}

-(CGPoint)checkBounds:(CGPoint)inPosition
{
    CGSize mapSize = self.tileMapLayer.tileMap.contentSize;
    CGPoint center = ccp([[CCDirector sharedDirector] winSize].width/2,
                         [[CCDirector sharedDirector] winSize].height/2);
    CGPoint desiredPosition = inPosition;
    if(desiredPosition.x < (center.x)) {  //LEFT
        desiredPosition.x = center.x;
    }
    if(desiredPosition.x > (mapSize.width - center.x)) {  //RIGHT
        desiredPosition.x = mapSize.width - center.x;
    }
    if(desiredPosition.y > (mapSize.height - center.y)) {  //UP
        desiredPosition.y = mapSize.height - center.y;
    }
    if(desiredPosition.y < (center.y)) {  //DOWN
        desiredPosition.y = center.y;
    }
    return desiredPosition;
}

-(void) changeSelectedCharacter:(CharacterObject *)newlySelectedCharacter
{
    if(newlySelectedCharacter != currentlySelectedCharacter_)
    {
        if(currentlySelectedCharacter_ != nil) {
            [self dispatchCharacterDeSelectionEventForCharacter:currentlySelectedCharacter_];
        }
        currentlySelectedCharacter_.isSelected = NO;
        
        newlySelectedCharacter.isSelected = YES;
        currentlySelectedCharacter_ = newlySelectedCharacter;
        if(newlySelectedCharacter != nil) {
            [self dispatchCharacterSelectionEventForCharacter:newlySelectedCharacter];
        }
    }
}

-(BOOL) ccTouchBegan:(UITouch *)touch withEvent:(UIEvent *)event
{
    movingMap = NO;
    CGPoint worldSpaceTouchLocation = [self convertTouchToNodeSpace: touch];
    touchBeginLocation = worldSpaceTouchLocation;
    lastTouchLocation = worldSpaceTouchLocation;
    lastTouchMovedLocation = touchBeginLocation;
    
    //Path drawing code begin
    
    //find object that you touched
    CharacterObject *tempCharacter = [[Simulator sharedSimulator] findCharacterByTouch:worldSpaceTouchLocation];
    
    [self changeSelectedCharacter:tempCharacter];
    if(tempCharacter != nil )
    {

        if(![currentlySelectedCharacter_ hasAlreadyMoved] && !([[Simulator sharedSimulator] simulatorState] == CombatState) && tempCharacter.playerID == currentPlayerID_)
        {
            if(currentlySelectedCharacter_.currentActionPoints > 0)
            {
                SplinePolygon *tempSplinePolygon = currentlySelectedCharacter_.mySpline;
                
                [tempSplinePolygon addSplinePoint:tempCharacter.position];
//                [tempSplinePolygon addSplinePoint:touchBeginLocation];
            }
            
            
            [ghostCharacter becomeGhostOf:tempCharacter];
                
            [[currentlySelectedCharacter_ touchPath] addControlPoint:worldSpaceTouchLocation];
            currentSplineDrawingState = Drawing;
                
        }
    }
    else
    {
        if(currentlySelectedCharacter_ != nil)
        {
            currentlySelectedCharacter_.isSelected = NO;
        }
        currentlySelectedCharacter_ = nil;
        movingMap = YES;
    }
    //Path drawing code end
    return YES;
}

-(void) ccTouchMoved:(UITouch *)touch withEvent:(UIEvent *)event
{
    //Camera movement
    CGPoint touchLocation = [self convertTouchToNodeSpace: touch];
    CGPoint drag = ccpSub(touchBeginLocation, touchLocation);
    CGPoint desiredPosition = ccpAdd(drag, self.camera.position);
    
    //QuietLog(@"Touch moved to: (%.1f, %.1f)", touchLocation.x, touchLocation.y);
    lastTouchMovedLocation = touchLocation;
    
    //Determine collision
    CGPoint spriteCorners[4];
    CGRect box = currentlySelectedCharacter_.boundingBox;
    spriteCorners[0] = ccp(touchLocation.x - box.size.width/2, touchLocation.y - box.size.height/2);  //BottonLeft
    spriteCorners[1] = ccp(touchLocation.x - box.size.width/2, touchLocation.y + box.size.height/2);   //TopLeft
    spriteCorners[2] = ccp(touchLocation.x + box.size.width/2, touchLocation.y + box.size.height/2);  //TopRight
    spriteCorners[3] = ccp(touchLocation.x + box.size.width/2, touchLocation.y - box.size.height/2);  //BottomRight
    
    BOOL isTargetCollideable = NO;
    for(int i = 0; i < 4; i++) { //Check each corner
        CGPoint loc = spriteCorners[i];
        //QuietLog(@"checking collision for corner: (%.1f, %.1f)", loc.x, loc.y);
        //        CGPoint tileCoord = [self.tileMapLayer tileCoordForPosition:ccpMult(loc, CC_CONTENT_SCALE_FACTOR())];
        CGPoint tileCoord = [self.tileMapLayer tileCoordForPosition:loc];
        if(tileCoord.x <= self.tileMapLayer.meta.contentSize.width)
        {
            int tileGid = [self.tileMapLayer.meta tileGIDAt:tileCoord];
            if (tileGid) {
                NSDictionary *properties = [self.tileMapLayer.tileMap propertiesForGID:tileGid];
                if (properties) {
                    NSString *collision = properties[@"Collidable"];
                    if (collision && [collision isEqualToString:@"True"] && currentSplineDrawingState == Drawing) {
                        isTargetCollideable = true;
                        currentSplineDrawingState = JustCollided;
                    }
                }
            }
        }
    }
    
    //spline stuff begin
    if(currentSplineDrawingState == Drawing) {
        
        if(currentlySelectedCharacter_ != nil &&
           !([[Simulator sharedSimulator] simulatorState] == CombatState))
        {
            if(![currentlySelectedCharacter_ hasAlreadyMoved] &&
               ([currentlySelectedCharacter_ playerID] == currentPlayerID_))
            {
                ghostCharacter.position = touchLocation;
                if((touchesMovedCounter == MaxTouchesMovedCounter) || ccpDistanceSQ(touchLocation, lastTouchLocation) > 50)
                {
                    lastTouchLocation = touchLocation;
                    touchesMovedCounter = 0;
                    if(![currentlySelectedCharacter_ addControlPoint:touchLocation])
                    {
                        currentSplineDrawingState = AlreadyCollided;
                        [self prematurelyEndSpline];
                    }
                }
                else
                {
                    ++touchesMovedCounter;
                }
            }
        }
    }
    else if(currentSplineDrawingState == JustCollided) {
        [self prematurelyEndSpline];
        currentSplineDrawingState = AlreadyCollided;
        
    }
    
    //Bounds checking against the map to not move offscreen
    desiredPosition = [self checkBounds:desiredPosition];
    if(movingMap)
    {
        self.camera.desiredPosition = desiredPosition;
    }
    
}

-(void) ccTouchEnded:(UITouch *)touch withEvent:(UIEvent *)event
{
    movingMap = NO;
    [ghostCharacter becomeInvisible];
    if(currentSplineDrawingState != AlreadyCollided) {
        [self finalizeSplineWithTouch:touch];
    }
}
-(void) prematurelyEndSpline
{
    [ghostCharacter becomeInvisible];
    if([[currentlySelectedCharacter_ touchPath] count] <= 4)
    {
        QuietLog(@"Not enough touch points");
        [currentlySelectedCharacter_ resetPath];
    }
    else
    {
        [currentlySelectedCharacter_ generateSpline];
        if(self.buttonsPressed & CombatMoveButton)
        {
            currentlySelectedCharacter_.action.type = CombatMoveAction;
        }
        else if(self.buttonsPressed & UseEquipmentButton)
        {
            currentlySelectedCharacter_.action.type = UseEquipmentAction;
        }
        else if(self.buttonsPressed & ChangeEquipmentButton)
        {
            currentlySelectedCharacter_.action.type = ChangeEquipmentAction;
        }
        else
        {
            currentlySelectedCharacter_.action.type = MoveAction;
        }
        QuietLog(@"action type: %d", currentlySelectedCharacter_.action.type);
    }
    
}
-(void) finalizeSplineWithTouch: (UITouch*) touch {
    if(currentlySelectedCharacter_ != nil && !([[Simulator sharedSimulator] simulatorState] == CombatState))
    {
        if(![currentlySelectedCharacter_ hasAlreadyMoved] &&
           ([currentlySelectedCharacter_ playerID] == currentPlayerID_))
        {
            CGPoint location = [self convertTouchToNodeSpace: touch];
            [[currentlySelectedCharacter_ touchPath] addControlPoint:location];
            [[currentlySelectedCharacter_ touchPath] addControlPoint:location]; //need a "ghost" point so that the sprite ends at the location touched
            if([[currentlySelectedCharacter_ touchPath] count] <= 4)
            {
                QuietLog(@"Not enough touch points");
                [currentlySelectedCharacter_ resetPath];
            }
            else
            {
                [currentlySelectedCharacter_ generateSpline];
                
                if(self.buttonsPressed & CombatMoveButton)
                {
                    currentlySelectedCharacter_.action.type = CombatMoveAction;
                }
                else if(self.buttonsPressed & UseEquipmentButton)
                {
                    currentlySelectedCharacter_.action.type = UseEquipmentAction;
                }
                else if(self.buttonsPressed & ChangeEquipmentButton)
                {
                    currentlySelectedCharacter_.action.type = ChangeEquipmentAction;
                }
                else
                {
                    currentlySelectedCharacter_.action.type = MoveAction;
                }
            }
        }
    }
    
}

-(void) registerCharacterSelectionListener:(id<CharacterSelectionListener>*)csl
{
    [characterSelectionListeners addObject:(id)csl];
}

-(void) dispatchCharacterSelectionEventForCharacter:(CharacterObject*)character
{
    for(id csl in characterSelectionListeners) {
        if([csl conformsToProtocol:@protocol(CharacterSelectionListener)]) {
            [csl characterSelected:character];
        }
    }
}

-(void) dispatchCharacterDeSelectionEventForCharacter:(CharacterObject*)character
{
    for(id csl in characterSelectionListeners) {
        if([csl conformsToProtocol:@protocol(CharacterSelectionListener)]) {
            [csl characterDeSelected:character];
        }
    }
}

- (void)dealloc
{
    [super dealloc];
    [characterSelectionListeners release];
}

@end
