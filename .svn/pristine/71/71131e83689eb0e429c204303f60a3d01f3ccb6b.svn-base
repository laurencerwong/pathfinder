//
//  HelloWorldLayer.m
//  cocos2d-normal
//
//  Created by Instructor on 9/18/13.
//  Copyright Instructor 2013. All rights reserved.
//


// Import the interfaces
#import "HelloWorldLayer.h"

// Needed to obtain the Navigation Controller
#import "AppDelegate.h"

#pragma mark - HelloWorldLayer

// HelloWorldLayer implementation
@implementation HelloWorldLayer

// Helper class method that creates a Scene with the HelloWorldLayer as the only child.
+(CCScene *) scene
{
	// 'scene' is an autorelease object.
	CCScene *scene = [CCScene node];
	
	// 'layer' is an autorelease object.
	HelloWorldLayer *layer = [HelloWorldLayer node];
	
	// add layer as a child to scene
	[scene addChild: layer];
	
	// return the scene
	return scene;
}

// on "init" you need to initialize your instance
-(id) init
{
	// always call "super" init
	// Apple recommends to re-assign "self" with the "super's" return value
	if( (self=[super init]) ) {
		
        
        self.touchEnabled = YES;
        touchPath = [[NSMutableArray alloc] init];
        splinePath = [[NSMutableArray alloc] init];
        touchesMovedCounter = 0;
        MaxTouchesMovedCounter = 5; //every 5 touches moved, record point
        
        /*
		// create and initialize a Label
		CCLabelTTF *label = [CCLabelTTF labelWithString:@"Hello World" fontName:@"Marker Felt" fontSize:64];
        
		// ask director for the window size
		CGSize size = [[CCDirector sharedDirector] winSize];
        
		// position the label on the center of the screen
		label.position =  ccp( size.width /2 , size.height/2 );
		
		// add the label as a child to this Layer
		[self addChild: label];
		
		
		
		//
		// Leaderboards and Achievements
		//
		
		// Default font size will be 28 points.
		[CCMenuItemFont setFontSize:28];
		
		// to avoid a retain-cycle with the menuitem and blocks
		__block id copy_self = self;
		
		// Achievement Menu Item using blocks
		CCMenuItem *itemAchievement = [CCMenuItemFont itemWithString:@"Achievements" block:^(id sender) {
			
			
			GKAchievementViewController *achivementViewController = [[GKAchievementViewController alloc] init];
			achivementViewController.achievementDelegate = copy_self;
			
			AppController *app = (AppController*) [[UIApplication sharedApplication] delegate];
			
			[[app navController] presentModalViewController:achivementViewController animated:YES];
			
			[achivementViewController release];
		}];
		
		// Leaderboard Menu Item using blocks
		CCMenuItem *itemLeaderboard = [CCMenuItemFont itemWithString:@"Leaderboard" block:^(id sender) {
			
			
			GKLeaderboardViewController *leaderboardViewController = [[GKLeaderboardViewController alloc] init];
			leaderboardViewController.leaderboardDelegate = copy_self;
			
			AppController *app = (AppController*) [[UIApplication sharedApplication] delegate];
			
			[[app navController] presentModalViewController:leaderboardViewController animated:YES];
			
			[leaderboardViewController release];
		}];
        
		
		CCMenu *menu = [CCMenu menuWithItems:itemAchievement, itemLeaderboard, nil];
		
		[menu alignItemsHorizontallyWithPadding:20];
		[menu setPosition:ccp( size.width/2, size.height/2 - 50)];
		
		// Add the menu to the layer
		[self addChild:menu];
        */
	}
	return self;
}

-(BOOL) ccTouchBegan:(UITouch *)touch withEvent:(UIEvent *)event
{
    [touchPath removeAllObjects];
    [splinePath removeAllObjects];
    CGPoint location = [self convertTouchToNodeSpace: touch];
    [touchPath addObject: [NSValue valueWithCGPoint:location] ]; //push touch point onto touchpath
    return YES;
}

-(void) registerWithTouchDispatcher {
    [[CCDirector sharedDirector].touchDispatcher addTargetedDelegate:self priority:INT_MIN+1 swallowsTouches:YES];
}

-(BOOL) ccTouchMoved:(UITouch *)touch withEvent:(UIEvent *)event
{
    CGPoint location = [self convertTouchToNodeSpace: touch];
    NSValue *lastRecordedPointValue = [touchPath objectAtIndex:0];
    if(touchesMovedCounter == MaxTouchesMovedCounter || ccpDistanceSQ(location, lastRecordedPointValue.CGPointValue) > 10)
    {
        [touchPath addObject:[NSValue valueWithCGPoint:location] ];
        touchesMovedCounter = 0;
    }
    else
    {
        ++touchesMovedCounter;
    }
    [self createSplineFromPoints:touchPath];
    return YES;
}

-(BOOL) ccTouchEnded:(UITouch *)touch withEvent:(UIEvent *)event
{
    CGPoint location = [self convertTouchToNodeSpace: touch];
    [touchPath addObject:[NSValue valueWithCGPoint:location] ];
    [self createSplineFromPoints:touchPath];
    return YES;
}


-(void) draw
{
    [super draw];
    
    glLineWidth(4.0f);
    

    if([splinePath count] > 2)
    {

        ccDrawColor4B(0, 255, 0, 175);
        
        for(int i = 0; i < [splinePath count] - 1; ++i)
        {
            NSValue *value0, *value1;
            CGPoint point0, point1;
            value0 = [splinePath objectAtIndex:i];
            value1 = [splinePath objectAtIndex:i + 1];
            point0 = value0.CGPointValue;
            point1 = value1.CGPointValue;
            ccDrawLine(point0, point1);
        }
        ccDrawColor4B(255, 0, 0, 175);
        for(int i = 0; i < [touchPath count] - 1; ++i)
        {
            NSValue *value0, *value1;
            CGPoint point0, point1;
            value0 = [touchPath objectAtIndex:i];
            value1 = [touchPath objectAtIndex:i + 1];
            point0 = value0.CGPointValue;
            point1 = value1.CGPointValue;
            ccDrawLine(point0, point1);
        }
    }
}


-(void)createSplineFromPoints:(NSMutableArray *)inPoints
{
    [splinePath removeAllObjects];
    NSLog(@"Calculating spline for %d points", [inPoints count]);
    [splinePath addObject: [inPoints objectAtIndex:0]];
    NSValue *value0, *value1, *value2, *value3;
    CGPoint point0, point1, point2, point3;
    if([inPoints count] < 4)
    {
        //not enough points for spline
        return;
    }
    for(int i = 0; i < [inPoints count] - 3; ++i)
    {
        value0 = [inPoints objectAtIndex:i];
        point0 = value0.CGPointValue;
        value1 = [inPoints objectAtIndex:i + 1];
        point1 = value1.CGPointValue;
        value2 = [inPoints objectAtIndex:i + 2];
        point2 = value2.CGPointValue;
        value3 = [inPoints objectAtIndex:i + 3];
        point3 = value3.CGPointValue;
        for(int j = 1; j < 5; ++j)
        {
            float t = j/5.0;
            //(P3 - P0 + 3*P1- 3*P2) * t^3
            
            CGPoint newPoint0 = point3;
            newPoint0 = ccpSub(newPoint0, point0);
            newPoint0 = ccpAdd(newPoint0, ccpMult(point1, 3));
            newPoint0 = ccpAdd(newPoint0, ccpMult(point2, -3));
            newPoint0 = ccpMult(newPoint0, powf(t, 3));
            
            // + (2*P0 - 5*P1 + 4*P2 - P3) * t^2
            CGPoint newPoint1 = ccpMult(point0, 2);
            newPoint1 = ccpAdd(newPoint1, ccpMult(point1, -5));
            newPoint1 = ccpAdd(newPoint1, ccpMult(point2, 4));
            newPoint1 = ccpSub(newPoint1, point3);
            newPoint1 = ccpMult(newPoint1, powf(t, 2));
            
            // + (-P0 + P2) * t
            CGPoint newPoint2 = ccpSub(point2, point0);
            newPoint2 = ccpMult(newPoint2, t);
            
            // + (2 * P1)
            newPoint2 = ccpAdd(newPoint2, ccpMult(point1, 2));
            newPoint2 = ccpAdd(newPoint2, newPoint1);
            newPoint2 = ccpAdd(newPoint2, newPoint0);
            newPoint2 = ccpMult(newPoint2, 0.5);
            
            [splinePath addObject:[NSValue valueWithCGPoint:newPoint2] ];
        }
    }
    NSLog(@"splinePath size = %d", [splinePath count]);
}

// on "dealloc" you need to release all your retained objects
- (void) dealloc
{
	// in case you have something to dealloc, do it in this method
	// in this particular example nothing needs to be released.
	// cocos2d will automatically release all the children (Label)
	
	// don't forget to call "super dealloc"
	[super dealloc];
}

#pragma mark GameKit delegate

-(void) achievementViewControllerDidFinish:(GKAchievementViewController *)viewController
{
	AppController *app = (AppController*) [[UIApplication sharedApplication] delegate];
	[[app navController] dismissModalViewControllerAnimated:YES];
}

-(void) leaderboardViewControllerDidFinish:(GKLeaderboardViewController *)viewController
{
	AppController *app = (AppController*) [[UIApplication sharedApplication] delegate];
	[[app navController] dismissModalViewControllerAnimated:YES];
}
@end
