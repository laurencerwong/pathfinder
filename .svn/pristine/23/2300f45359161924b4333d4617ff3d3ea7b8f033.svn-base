//
//  CharacterObject.m
//  cocos2d-normal
//
//  Created by Laurence Wong on 11/4/13.
//  Copyright (c) 2013 Instructor. All rights reserved.
//

#import "CharacterObject.h"

@implementation CharacterObject

- (id)init
{
    self = [super init];
    if (self) {
        splinePath = [[CCPointArray alloc] init];
        distancesBetweenPoints = [[NSMutableArray alloc] init];
    }
    return self;
}

-(void) calculateSpeedsFromPoints:(CCPointArray *)inPoints
{
    NSMutableArray *speedArray = [[NSMutableArray alloc] init];
    
    desiredSpeed = 200.0f; //TODO get this from stats

    float firstDistance = ccpDistance([splinePath getControlPointAtIndex:1], [splinePath getControlPointAtIndex:0]);
    
    [distancesBetweenPoints addObject:[NSNumber numberWithFloat:firstDistance]];

    float time = firstDistance / desiredSpeed;
    [speedArray addObject:[CCMoveTo actionWithDuration:time position:[splinePath getControlPointAtIndex:1]]];
    for(int i = 2; i < [inPoints count]; ++i)
    {
        float nextDistance = ccpDistance([splinePath getControlPointAtIndex:i], [splinePath getControlPointAtIndex:i - 1]);
        [distancesBetweenPoints addObject:[NSNumber numberWithFloat:nextDistance]];
        float newTime = nextDistance / desiredSpeed;
        [speedArray addObject:[CCMoveTo actionWithDuration:newTime position:[splinePath getControlPointAtIndex:i]]];
    }
    [self runAction:[CCSequence actionWithArray:speedArray]];
}

-(void)createSplineFromPoints:(CCPointArray *)inPoints
{
    [[splinePath controlPoints] removeAllObjects];
    //    NSLog(@"Calculating spline for %d points", [inPoints count]);
    [splinePath addControlPoint: [inPoints getControlPointAtIndex:0]];
    CGPoint point0, point1, point2, point3;
    if([inPoints count] < 4)
    {
        //not enough points for spline
        return;
    }
    for(int i = 0; i < [inPoints count] - 3; ++i)
    {
        point0 = [inPoints getControlPointAtIndex:i];
        point1 = [inPoints getControlPointAtIndex:i + 1];
        point2 = [inPoints getControlPointAtIndex:i + 2];
        point3 = [inPoints getControlPointAtIndex:i + 3];
        for(int j = 1; j < 5; ++j)
        {
            float t = j/5.0;
            //(P3 - P0 + 3*P1- 3*P2) * t^3
            
            CGPoint newPoint0 = point3;
            newPoint0 = ccpSub(newPoint0, point0);
            newPoint0 = ccpAdd(newPoint0, ccpMult(point1, 3));
            newPoint0 = ccpAdd(newPoint0, ccpMult(point2, -3));
            newPoint0 = ccpMult(newPoint0, powf(t, 3));
            
            // + (2*P0 - 5*P1 + 4*P2 - P3) * t^2
            CGPoint newPoint1 = ccpMult(point0, 2);
            newPoint1 = ccpAdd(newPoint1, ccpMult(point1, -5));
            newPoint1 = ccpAdd(newPoint1, ccpMult(point2, 4));
            newPoint1 = ccpSub(newPoint1, point3);
            newPoint1 = ccpMult(newPoint1, powf(t, 2));
            
            // + (-P0 + P2) * t
            CGPoint newPoint2 = ccpSub(point2, point0);
            newPoint2 = ccpMult(newPoint2, t);
            
            // + (2 * P1)
            newPoint2 = ccpAdd(newPoint2, ccpMult(point1, 2));
            newPoint2 = ccpAdd(newPoint2, newPoint1);
            newPoint2 = ccpAdd(newPoint2, newPoint0);
            newPoint2 = ccpMult(newPoint2, 0.5);
            
            [splinePath addControlPoint:newPoint2];
        }
    }
    //    NSLog(@"splinePath size = %d", [splinePath count]);
}

-(void)update:(ccTime)delta
{
    
}


@end
